diff --git a/__init__.py b/__init__.py
index 4cc56d5..772bcb9 100755
--- a/__init__.py
+++ b/__init__.py
@@ -1,4 +1,4 @@
-import os,gettext
+import os, gettext
 
 PluginLanguageDomain = "BROWSER"
 
diff --git a/cbcfg.py b/cbcfg.py
index de1d3f1..42140e4 100755
--- a/cbcfg.py
+++ b/cbcfg.py
@@ -55,9 +55,9 @@ class PLogger:
  
     def Log(self, level, format, argv):
         if level < self.level:
-		return                         
-        print "[" + _LVSTR[level] + "]", format % argv
-                                                      
+            return
+        print("[" + _LVSTR[level] + "]", format % argv)
+
 def INIT(level=_ERROR):                               
     PLogger.GetInstance().Init(level)                 
                                                       
diff --git a/chromium.py b/chromium.py
index 26cd7c6..430cc7d 100755
--- a/chromium.py
+++ b/chromium.py
@@ -8,7 +8,7 @@ from Components.config import config, ConfigSubsection, ConfigYesNo, ConfigText,
 
 from enigma import eTimer
 
-import cbcfg
+from . import cbcfg
 
 class ChromiumOSSettings(ConfigListScreen, Screen):
 	skin=   """
diff --git a/pipc.py b/pipc.py
index 48f0823..75a8ab5 100755
--- a/pipc.py
+++ b/pipc.py
@@ -1,4 +1,6 @@
-import os, threading, time, socket, select, struct, cbcfg
+import os, threading, time, socket, select, struct
+
+from . import cbcfg
 
 _OPCODE  = {}
 _BUFSIZE = 4096
@@ -67,7 +67,7 @@ class PServerThread(threading.Thread):
             self.mSock.settimeout(self.mTimeout)
             self.mSock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
             self.mSock.bind(addr)
-        except Exception, err:
+        except Exception as err:
             cbcfg.ERROR("socket() fail : %s", err)
             return False
         return True
@@ -98,7 +98,7 @@ class PServerThread(threading.Thread):
         result, send_packet = False,None
         try:
             result, send_packet = GetHandler(opcode)(result, recv_data)
-        except Exception, err:
+        except Exception as err:
             cbcfg.ERROR(err)
         send_data = self.assamble(opcode, result, send_packet)
         conn.sendall(send_data)
@@ -118,7 +118,7 @@ class PServerThread(threading.Thread):
                     try:
                         conn, addr = self.mSock.accept()
                         self.process(conn, addr)
-                    except Exception, err:
+                    except Exception as err:
                         cbcfg.ERROR("PServerThread: %s", err)
                     finally:
                         if conn is not None:
diff --git a/plugin.py b/plugin.py
index ea9b56d..f91dda6 100644
--- a/plugin.py
+++ b/plugin.py
@@ -5,16 +5,18 @@ from Components.config import config
 from Components.ActionMap import ActionMap
 from Components.VolumeControl import VolumeControl
 
-import os, cbcfg, pipc, time, subprocess
+import os, time, subprocess
+
+from . import cbcfg, pipc
 
 from enigma import eTimer, fbClass, eRCInput, eDVBResourceManager
 
 from Tools.Transponder import ConvertToHumanReadable
 
-from pipc import PServerThread, PServerHandlers
+from .pipc import PServerThread, PServerHandlers
 
-from youtube import YoutubeTVWindow, YoutubeTVSettings
-from chromium import ChromiumOSWindow, ChromiumOSSettings
+from .youtube import YoutubeTVWindow, YoutubeTVSettings
+from .chromium import ChromiumOSWindow, ChromiumOSSettings
 
 _g_launcher_handler = None
 
@@ -24,41 +24,41 @@ cbcfg.INIT(cbcfg._ERROR)
 _g_locked = False
 
 def dvbapp_lock():
-	cbcfg.DEBUG("dvbapp_lock")                                                                                                                            
+	cbcfg.DEBUG("dvbapp_lock")
 #	fbClass.getInstance().lock()
 	global _g_locked
 	_g_locked = True
-	eRCInput.getInstance().lock()                                                                                                                              
-                                                                                                                                                               
-def dvbapp_unlock():                                                                                                                                        
-	cbcfg.DEBUG("dvbapp_unlock")                                                                                                                          
+	eRCInput.getInstance().lock()
+
+def dvbapp_unlock():
+	cbcfg.DEBUG("dvbapp_unlock")
 #	fbClass.getInstance().unlock()
 	global _g_locked
 	_g_locked = False
 	eRCInput.getInstance().unlock()
 
 _OPCODES = [ 'CONTROL_EXIT', 'VIRTUAL_KEYBOARD', 'OPCODE_END' ]
-class BrowserHandlers(PServerHandlers):                                                                                                                     
+class BrowserHandlers(PServerHandlers):
 	def __init__(self):
-		PServerHandlers.__init__(self, _OPCODES, '_CBH_')                                                                                                      
+		PServerHandlers.__init__(self, _OPCODES, '_CBH_')
 		self._player_exit_cb()
-                                                                                                                                                               
+
 	def _player_exit_cb(self, ret=None):
-		try:                                                                                                                                                   
-			self.playerHandle.playlist.clear()                                                                                                                 
-		except: pass                                                                                                                                           
+		try:
+			self.playerHandle.playlist.clear()
+		except: pass
 		self.playerHandle = None
 
-	def _CBH_CONTROL_EXIT(self, result, packet):                                                                                                               
-        	try:                                                                                                                                                   
-			global _g_launcher_handler                                                                                                                         
-			if _g_launcher_handler is not None:                                                                                                                
-				_g_launcher_handler.Exit()                                                                                                                     
-				_g_launcher_handler = None                                                                                                                     
-        	except Exception, err:                                                                                                                                 
-            		cbcfg.ERROR("%s", err)                                                                                                                           
-            		return (False, None)                                                                                                                               
-        	return (True, None)
+	def _CBH_CONTROL_EXIT(self, result, packet):
+		try:
+			global _g_launcher_handler
+			if _g_launcher_handler is not None:
+				_g_launcher_handler.Exit()
+				_g_launcher_handler = None
+		except Exception as err:
+			cbcfg.ERROR("%s", err)
+			return (False, None)
+		return (True, None)
 
 	def _CBH_VIRTUAL_KEYBOARD(self, result, packet):
 		default_data = packet
@@ -70,12 +70,12 @@ class BrowserHandlers(PServerHandlers):
 				if returned_data is not None:
 					break
 				time.sleep(1)
-		except Exception, err:
+		except Exception as err:
 			cbcfg.ERROR("%s", err)
 			return (False, None)
 		return (True, returned_data)
 
-_HANDLER = BrowserHandlers()                                                                                    
+_HANDLER = BrowserHandlers()
 class BBrowserLauncher(Screen):
 	skin = """<screen name="BBrowserLauncher" position="0,0" size="0,0" backgroundColor="transparent" flags="wfNoBorder" title=" "></screen>"""
 	def __init__(self, session, mode=None, url="http://vuplus.com"):
@@ -83,19 +83,19 @@ class BBrowserLauncher(Screen):
 
 		Screen.__init__(self, session)
 		
-		self.isMute = -1		
+		self.isMute = -1
 
-		self.pServerThread = PServerThread()                                                                                                                
-		self.pServerThread.open(timeout = 1)                                                                                                                
+		self.pServerThread = PServerThread()
+		self.pServerThread.open(timeout = 1)
 		self.pServerThread.start()
 
-		self.closeTimer = eTimer()                                                    
-        	self.closeTimer.timeout.get().append(self._cb_CloseTimer)
+		self.closeTimer = eTimer()
+		self.closeTimer.timeout.get().append(self._cb_CloseTimer)
 		
-		global _g_launcher_handler                                                                                                                             
-        	_g_launcher_handler = self
+		global _g_launcher_handler
+		_g_launcher_handler = self
 
-		cbcfg.g_service = session.nav.getCurrentlyPlayingServiceReference()       
+		cbcfg.g_service = session.nav.getCurrentlyPlayingServiceReference()
 		if cbcfg.g_service is not None:   
 			feId = self.GetCurrentFeId()
 			session.nav.stopService()  
@@ -107,8 +107,8 @@ class BBrowserLauncher(Screen):
 			self.isMute = 1
 		else :
 			self.isMute = 0
-		
-		cbcfg.DEBUG("[Chromium Plugin] ==== >> default mute [%d]" % self.isMute)		
+
+		cbcfg.DEBUG("[Chromium Plugin] ==== >> default mute [%d]" % self.isMute)
 
 		command = "/usr/local/chromium/run.sh "
 		if mode == "youtubetv":
@@ -149,9 +149,9 @@ class BBrowserLauncher(Screen):
 		#os.system(command)
 		subprocess.call(command, shell=True)
 
-                self.dvbappLockTimer = eTimer()                                                
-                self.dvbappLockTimer.timeout.get().append(self._cb_DvbappLockTimer)            
-                self.dvbappLockTimer.start(2000)
+		self.dvbappLockTimer = eTimer()
+		self.dvbappLockTimer.timeout.get().append(self._cb_DvbappLockTimer)
+		self.dvbappLockTimer.start(2000)
 
 		self.virtual_keyboard_data = None
 		self.virtual_keyboard_closed = True
@@ -171,40 +171,40 @@ class BBrowserLauncher(Screen):
 	def TryCloseFrontend(self, feId):
 		res_mgr = eDVBResourceManager.getInstance()
 		if res_mgr :
-		        raw_channel = res_mgr.allocateRawChannel(feId)
-		        if raw_channel :
-		                frontend = raw_channel.getFrontend()
-		                if frontend :
-		                        frontend.closeFrontend() # immediate close...
-		                        del frontend
-		                        del raw_channel
-		                        return True
+			raw_channel = res_mgr.allocateRawChannel(feId)
+			if raw_channel :
+				frontend = raw_channel.getFrontend()
+				if frontend :
+					frontend.closeFrontend() # immediate close...
+					del frontend
+					del raw_channel
+					return True
 		return False
 
 	def _cb_DvbappLockTimer(self):
-		self.dvbappLockTimer.stop()                                                                                                                            
-		dvbapp_lock()                                                                                                                                          
-                                                                                                                                                               
+		self.dvbappLockTimer.stop()
+		dvbapp_lock()
+
 	def Exit(self):
 		if self.isMute :
 			VolumeControl.instance.volctrl.volumeMute()
 		else :
 			VolumeControl.instance.volctrl.volumeUnMute()
 
-		cbcfg.DEBUG("[Chromium Plugin] ==== >> default mute [%d] , restore mute [%d]" % (self.isMute, self.isMute))		
+		cbcfg.DEBUG("[Chromium Plugin] ==== >> default mute [%d] , restore mute [%d]" % (self.isMute, self.isMute))
 
 		self.closeTimer.start(1500)
 
 	def _cb_CloseTimer(self):
-	        self.closeTimer.stop()                                                                                                                                 
-       	                                                                                                                                                        
-		self.pServerThread.kill()                                                                                                                              
-		self.pServerThread.join()                                                                                                                              
-                                                                                                                                                               
-		dvbapp_unlock()                                                                                                                                        
-                                                                                                                                                               
-		if cbcfg.g_service is not None:                                                                                                                  
-                	self.session.nav.playService(cbcfg.g_service)                                                                                            
+		self.closeTimer.stop()
+
+		self.pServerThread.kill()
+		self.pServerThread.join()
+
+		dvbapp_unlock()
+
+		if cbcfg.g_service is not None:
+			self.session.nav.playService(cbcfg.g_service)
 		self.close()
 
 	def _virtual_keyborad_closed_cb(self, data):
@@ -228,15 +228,15 @@ class BBrowserLauncher(Screen):
 global_session = None
 def stt_event_callback(text):
 	url = "https://www.google.co.kr/search?q=" + text.replace(' ', '+')
+	global _g_locked
 	if global_session is not None and _g_locked == False:
 		dvbapp_unlock()
-        	global _g_locked                                                                                                                                       
-        	_g_locked = True
+		_g_locked = True
 		cbcfg.g_browser = global_session.open(BBrowserLauncher, mode="chromiumos_stt", url=url)
 
 def start_youtubetv_main(session, **kwargs):
-        def _cb_youtubetv_close(ret):
-       	        if ret:
+	def _cb_youtubetv_close(ret):
+		if ret:
 			dvbapp_unlock()
 			cbcfg.g_browser = session.open(BBrowserLauncher, mode="youtubetv")
 
@@ -246,17 +246,17 @@ def start_youtubetv_main(session, **kwargs):
 		session.openWithCallback(_cb_youtubetv_close, YoutubeTVWindow)
 
 def menu_start_youtube(menuid, **kwargs):                                         
-        if menuid == "mainmenu":                                                  
-       	        return [(_("YouTubeTV"), start_youtubetv_main, "youtubetv", 46)]
-        return []
+		if menuid == "mainmenu":
+			return [(_("YouTubeTV"), start_youtubetv_main, "youtubetv", 46)]
+		return []
 
-def plugin_setting_youtube(session, **kwargs):                                                                                                                 
-        session.open(YoutubeTVSettings)    
+def plugin_setting_youtube(session, **kwargs):
+	session.open(YoutubeTVSettings)
 
 def plugin_start_chromiumos(session, **kwargs):
 	dvbapp_unlock()
-        def _cb_chromiumos_close(ret):
-                if ret:
+	def _cb_chromiumos_close(ret):
+		if ret:
 			dvbapp_unlock()
 			cbcfg.g_browser = session.open(BBrowserLauncher, mode="chromiumos")
 	cbcfg.g_browser = session.openWithCallback(_cb_chromiumos_close, ChromiumOSWindow)
diff --git a/youtube.py b/youtube.py
index d719d76..e9339c2 100755
--- a/youtube.py
+++ b/youtube.py
@@ -6,7 +6,7 @@ from Components.Label import Label
 from Components.Sources.StaticText import StaticText
 from Components.config import config, ConfigSubsection, ConfigYesNo, ConfigText, getConfigListEntry
 
-import cbcfg
+from . import cbcfg
 
 class YoutubeTVSettings(ConfigListScreen, Screen):
 	skin=   """
